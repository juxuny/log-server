// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package log_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogServerClient is the client API for LogServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogServerClient interface {
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
}

type logServerClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServerClient(cc grpc.ClientConnInterface) LogServerClient {
	return &logServerClient{cc}
}

func (c *logServerClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := c.cc.Invoke(ctx, "/log_server.LogServer/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServerClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/log_server.LogServer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServerClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/log_server.LogServer/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServerServer is the server API for LogServer service.
// All implementations must embed UnimplementedLogServerServer
// for forward compatibility
type LogServerServer interface {
	Add(context.Context, *AddReq) (*AddResp, error)
	Ping(context.Context, *PingReq) (*PingResp, error)
	Info(context.Context, *InfoReq) (*InfoResp, error)
	mustEmbedUnimplementedLogServerServer()
}

// UnimplementedLogServerServer must be embedded to have forward compatible implementations.
type UnimplementedLogServerServer struct {
}

func (UnimplementedLogServerServer) Add(context.Context, *AddReq) (*AddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedLogServerServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLogServerServer) Info(context.Context, *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedLogServerServer) mustEmbedUnimplementedLogServerServer() {}

// UnsafeLogServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServerServer will
// result in compilation errors.
type UnsafeLogServerServer interface {
	mustEmbedUnimplementedLogServerServer()
}

func RegisterLogServerServer(s grpc.ServiceRegistrar, srv LogServerServer) {
	s.RegisterService(&LogServer_ServiceDesc, srv)
}

func _LogServer_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log_server.LogServer/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServerServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log_server.LogServer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServerServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogServer_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServerServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log_server.LogServer/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServerServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LogServer_ServiceDesc is the grpc.ServiceDesc for LogServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "log_server.LogServer",
	HandlerType: (*LogServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _LogServer_Add_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _LogServer_Ping_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _LogServer_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log_server.proto",
}
